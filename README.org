* Better Helm
:PROPERTIES:
:SUMMARY: Configuration guide for the helm package of Emacs
:END:

This guide was intended for people which used ido in the past and wanted helm to
behave more like ido (ido + flx-ido + ido-vertical-mode + smex). Because this guide inlcudes
many other snippets now which I consider useful in general it has become more of collection
of configuration tips to improve helms default interface and is not targeted to former ido users only. 
 
For now the configuration snippets inlcude the following
features:

- Always pop up at the bottom
- Input in header line
- Show helm source headers only when necessary
- No mode-line above the helm buffer.
- Flx support with gc adjustment to improve speed. 
- DEL and RETURN for file navigation like in ido
- Remove the dots for current and parent directory in helm file navigation
- Smex support for helm-M-x


*NOTE*

This is work in progress. If you encounter any problems let me know.
Some of this is my own work, but most is based on work of others that I summarized in this tutorial.
Everyone has his own opinions what is considered an improvment because of that I have splitted 
the guide into parts where each snippet should be independent of others, so you can just pick what you like.

** Screenshots

[[./screenshot.png]]
[[./screenshot2.png]]

** Installing helm and friends

If you haven't already go and install helm, helm-swoop and helm-flx. You can do it
quickly by evaluating the following snippet.
 
#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;; Note that certificate verfication in Emacs 24.4 needs some 
  ;; manual adjustments if you want to be really secure.
  ;; Read this for more info on this: https://glyph.twistedmatrix.com/2015/11/editor-malware.html
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (mapcar #'(lambda (package) (unless (package-installed-p package) (package-install package)))
          '(helm helm-swoop helm-flx))
#+END_SRC


Now load and activate the packages like shown below.

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
(helm-flx-mode 1)
#+END_SRC

** Appearance

The following snippet will configure helm to always pop up at the bottom.
#+BEGIN_SRC emacs-lisp
(setq helm-split-window-in-side-p t)

(add-to-list 'display-buffer-alist
             '("\\`\\*helm.*\\*\\'"
               (display-buffer-in-side-window)
               (inhibit-same-window . t)
               (window-height . 0.4)))

(setq helm-swoop-split-with-multiple-windows nil
        helm-swoop-split-direction 'split-window-vertically
        helm-swoop-split-window-function 'helm-default-display-buffer)

#+END_SRC

The following snippet will let you provide input in the header line 
and hide the mode-lines above.

[[http://emacs.stackexchange.com/a/15250/9198][Reference]]

#+BEGIN_SRC emacs-lisp
(setq helm-echo-input-in-header-line t)

(defvar bottom-buffers nil
  "List of bottom buffers before helm session.
    Its element is a pair of `buffer-name' and `mode-line-format'.")

(defun bottom-buffers-init ()
  (setq-local mode-line-format (default-value 'mode-line-format))
  (setq bottom-buffers
        (cl-loop for w in (window-list)
                 when (window-at-side-p w 'bottom)
                 collect (with-current-buffer (window-buffer w)
                           (cons (buffer-name) mode-line-format)))))


(defun bottom-buffers-hide-mode-line ()
  (setq-default cursor-in-non-selected-windows nil)
  (mapc (lambda (elt)
          (with-current-buffer (car elt)
            (setq-local mode-line-format nil)))
        bottom-buffers))


(defun bottom-buffers-show-mode-line ()
  (setq-default cursor-in-non-selected-windows t)
  (when bottom-buffers
    (mapc (lambda (elt)
            (with-current-buffer (car elt)
              (setq-local mode-line-format (cdr elt))))
          bottom-buffers)
    (setq bottom-buffers nil)))

(defun helm-keyboard-quit-advice (orig-func &rest args)
  (bottom-buffers-show-mode-line)
  (apply orig-func args))


(add-hook 'helm-before-initialize-hook #'bottom-buffers-init)
(add-hook 'helm-after-initialize-hook #'bottom-buffers-hide-mode-line)
(add-hook 'helm-exit-minibuffer-hook #'bottom-buffers-show-mode-line)
(add-hook 'helm-cleanup-hook #'bottom-buffers-show-mode-line)
(advice-add 'helm-keyboard-quit :around #'helm-keyboard-quit-advice)
#+END_SRC

The header lines for the sources are only useful if there are more then a single source.
The following snippet will hide the header line if there is only one.
[[http://www.reddit.com/r/emacs/comments/2z7nbv/lean_helm_window/][Reference]]
#+BEGIN_SRC emacs-lisp
(setq helm-display-header-line nil)

(defvar helm-source-header-default-background (face-attribute 'helm-source-header :background))
(defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground))
(defvar helm-source-header-default-box (face-attribute 'helm-source-header :box))

(defun helm-toggle-header-line ()
  (if (> (length helm-sources) 1)
      (set-face-attribute 'helm-source-header
                          nil
                          :foreground helm-source-header-default-foreground
                          :background helm-source-header-default-background
                          :box helm-source-header-default-box
                          :height 1.0)
    (set-face-attribute 'helm-source-header
                        nil
                        :foreground (face-attribute 'helm-selection :background)
                        :background (face-attribute 'helm-selection :background)
                        :box nil
                        :height 0.1)))


(add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)

#+END_SRC


And finally this will hide the minibuffer while helm is active

[[https://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/][Reference]]

#+BEGIN_SRC emacs-lisp
(defun helm-hide-minibuffer-maybe ()
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                              `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))

(add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)

#+END_SRC

** File Navigation

The following snippet will reconfigure the behaviour of keys in helm
file navigation buffers.

Backspace goes to the upper folder if you are not inside a filename,
and Return will select a file or navigate into the directory if
it is one.

[[http://emacs.stackexchange.com/a/7896/9198][Reference]]

#+BEGIN_SRC emacs-lisp
(defun dwim-helm-find-files-up-one-level-maybe ()
  (interactive)
  (if (looking-back "/" 1)
      (call-interactively 'helm-find-files-up-one-level)
    (delete-backward-char 1)))

(define-key helm-read-file-map (kbd "<backsqpace>") 'dwim-helm-find-files-up-one-level-maybe)
(define-key helm-read-file-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)
(define-key helm-find-files-map (kbd "<backspace>") 'dwim-helm-find-files-up-one-level-maybe)
(define-key helm-find-files-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)

(defun dwim-helm-find-files-navigate-forward (orig-fun &rest args)
  "Adjust how helm-execute-persistent actions behaves, depending on context"
  (if (file-directory-p (helm-get-selection))
      (apply orig-fun args)
    (helm-maybe-exit-minibuffer)))


(define-key helm-map (kbd "<return>") 'helm-maybe-exit-minibuffer)
(define-key helm-map (kbd "RET") 'helm-maybe-exit-minibuffer)
(define-key helm-find-files-map (kbd "<return>") 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "<return>") 'helm-execute-persistent-action)
(define-key helm-find-files-map (kbd "RET") 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "RET") 'helm-execute-persistent-action)

(advice-add 'helm-execute-persistent-action :around #'dwim-helm-find-files-navigate-forward)
#+END_SRC

And this snippet will remove the dots in helm file navigation

[[https://github.com/TheBB/spacemacs-layers/tree/master/no-dots][Reference]]

#+BEGIN_SRC emacs-lisp

(require 'cl-lib)

(with-eval-after-load 'helm-files
    (advice-add 'helm-ff-filter-candidate-one-by-one
                :around 'no-dots/helm-ff-filter-candidate-one-by-one)
    (advice-add 'helm-find-files-up-one-level
                :around 'no-dots/helm-find-files-up-one-level))

(defvar no-dots-whitelist
  '()
  "List of helm buffers in which to show dots.")

(defun no-dots/whitelistedp ()
  (member (with-helm-buffer (buffer-name)) no-dots-whitelist))

(defun no-dots/helm-ff-filter-candidate-one-by-one (fcn file)
  (when (or (no-dots/whitelistedp)
            (not (string-match "\\(?:/\\|\\`\\)\\.\\{1,2\\}\\'" file)))
    (funcall fcn file)))

(defun no-dots/helm-file-completion-source-p (&rest args) t)

(defun no-dots/helm-find-files-up-one-level (fcn &rest args)
  (prog2
      (advice-add 'helm-file-completion-source-p
                  :around 'no-dots/helm-file-completion-source-p)
      (apply fcn args)
    (advice-remove 'helm-file-completion-source-p
                   'no-dots/helm-file-completion-source-p)))


#+END_SRC

** Improve Flx support

The following snippet will advice the helm source function to enable the flx fuzzy match in all sources. 

[[https://github.com/emacs-helm/helm/issues/145#issuecomment-151953381][Reference]]

#+BEGIN_SRC emacs-lisp
(defun my-helm-make-source (f &rest args)
  (nconc args '(:fuzzy-match t))
  (apply f args))

(advice-add 'helm-make-source :around 'my-helm-make-source)
#+END_SRC

And you can increase flx speed (I have not benchmarked it myself) with 
the following.

[[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Reference]]

#+BEGIN_SRC emacs-lisp
;; garbage collections
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)


#+END_SRC 

** Helm Smex
After putting the following snippet in your init you can use smex in conjunction with helm.

[[https://github.com/bmag/spacemacs-config/blob/65d4bf31f30aae8553f57553f0936b4237ac1bb8/private/helm-smex/packages.el][Reference]]

#+BEGIN_SRC emacs-lisp
(require 'smex)
(smex-initialize)

(defvar helm-smex-source--candidates nil)
(defvar helm-smex-source--cache (make-hash-table :test #'eq))

(defun helm-smex//score-no-cache (command)
  (or (cdr (car (cl-member (symbol-name command) smex-cache
                           :test #'string=)))
      0))

(defun helm-smex//score (command)
  (or (gethash command helm-smex-source--cache)
      (puthash command (helm-smex//score-no-cache command)
               helm-smex-source--cache)))

(defun helm-smex//compare-candidates (command-name1 command-name2)
  (> (helm-smex//score (intern-soft command-name1))
     (helm-smex//score (intern-soft command-name2))))

(defclass helm-smex-source (helm-source-sync)
  ((init
    :initform (lambda ()
                (setq helm-smex-source--candidates
                      (smex-convert-for-ido smex-cache))
                (clrhash helm-smex-source--cache)))
   (candidates :initform 'helm-smex-source--candidates)
   (match :initform 'helm-fuzzy-match)
   (filtered-candidates-transformer
    :initform (lambda (candidates source)
                (sort candidates #'helm-smex//compare-candidates)))
   (action
    :initform (lambda (command-name)
                (unwind-protect
                    (execute-extended-command current-prefix-arg
                                              command-name)
                  (smex-rank (intern command-name)))))))

(defun helm-smex/run ()
  (interactive)
  (helm :buffer "*helm-smex*"
        :sources (helm-make-source "Smex" helm-smex-source)))

#+END_SRC


