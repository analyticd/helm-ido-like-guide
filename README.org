* Better Helm Defaults
:PROPERTIES:
:SUMMARY: Configuration guide for the helm package of Emacs
:END:

This guide was intended for people which used ido in the past and wanted helm to
behave more like ido (ido + flx-ido + ido-vertical-mode + smex). Now this guide inlcudes
many snippets which are useful for helm usage in general and has become more of collection
of configuration tips and recommended packages to improve helms default interface.
 
For now the configuration snippets and packages will provide the following features for you:


- Always pop up at the bottom
- Nice search through an overview of matches with helm-swoop
- Input in header line and hide the minibuffer
- Show helm source headers only when necessary
- No mode-lines above the helm buffer
- Flx support with gc adjustment to improve speed.
- DEL and RETURN for file navigation like in ido
- Remove the dots for current and parent directory in helm file navigation
- Smex support for =helm-M-x= , to adjust search results for recent and most frequent used commands
- Remember last candidates for more sources with =helm-adaptive= (Not recommended for now)

*NOTE*

This is a work in progress. If you encounter any problems let me know.
Some of this is my own work, but most is based on work of others that I summarized in this tutorial.
Everyone has his own opinions what is considered an improvement because of that I have splitted 
the guide into parts where each snippet should be independent of others, so you can just pick what you like.

** Screenshots

[[./screenshot.png]]
Theme: [[https://github.com/edran/hc-zenburn-emacs][hc-zenburn]] with some adjustments.

** Installing helm and friends

If you haven't already go and install helm, helm-swoop, helm-flx, helm-fuzzier, smex and helm-smex. You can do it
quickly by evaluating the following snippet.
 
#+BEGIN_SRC emacs-lisp
  (require 'package)
  ;; Note that certificate verfication in Emacs 24.4 needs some 
  ;; manual adjustments if you want to be really secure.
  ;; Read this for more info on this: https://glyph.twistedmatrix.com/2015/11/editor-malware.html
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (mapcar #'(lambda (package) (unless (package-installed-p package) (package-install package)))
          '(helm helm-swoop helm-flx helm-fuzzier smex helm-smex dash))
#+END_SRC


Now either follow this guide or just get the helm-better-defaults.el file and
require it in your init file.

** Load helm plus extensions

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(require 'helm-config)
(helm-mode 1)
(helm-flx-mode 1)
(helm-fuzzier-mode 1)
#+END_SRC

** Appearance

The following snippet will configure helm to always pop up at the bottom.
#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(setq helm-split-window-in-side-p t)

(add-to-list 'display-buffer-alist
             '("\\`\\*helm.*\\*\\'"
               (display-buffer-in-side-window)
               (inhibit-same-window . t)
               (window-height . 0.4)))

(setq helm-swoop-split-with-multiple-windows nil
        helm-swoop-split-direction 'split-window-vertically
        helm-swoop-split-window-function 'helm-default-display-buffer)

#+END_SRC

The following snippet will let you provide input in the header line 
and hide the mode-lines above.

[[http://emacs.stackexchange.com/a/15250/9198][Reference]]

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(setq helm-echo-input-in-header-line t)

(defvar bottom-buffers nil
  "List of bottom buffers before helm session.
    Its element is a pair of `buffer-name' and `mode-line-format'.")

(defun bottom-buffers-init ()
  (setq-local mode-line-format (default-value 'mode-line-format))
  (setq bottom-buffers
        (cl-loop for w in (window-list)
                 when (window-at-side-p w 'bottom)
                 collect (with-current-buffer (window-buffer w)
                           (cons (buffer-name) mode-line-format)))))


(defun bottom-buffers-hide-mode-line ()
  (setq-default cursor-in-non-selected-windows nil)
  (mapc (lambda (elt)
          (with-current-buffer (car elt)
            (setq-local mode-line-format nil)))
        bottom-buffers))


(defun bottom-buffers-show-mode-line ()
  (setq-default cursor-in-non-selected-windows t)
  (when bottom-buffers
    (mapc (lambda (elt)
            (with-current-buffer (car elt)
              (setq-local mode-line-format (cdr elt))))
          bottom-buffers)
    (setq bottom-buffers nil)))

(defun helm-keyboard-quit-advice (orig-func &rest args)
  (bottom-buffers-show-mode-line)
  (apply orig-func args))


(add-hook 'helm-before-initialize-hook #'bottom-buffers-init)
(add-hook 'helm-after-initialize-hook #'bottom-buffers-hide-mode-line)
(add-hook 'helm-exit-minibuffer-hook #'bottom-buffers-show-mode-line)
(add-hook 'helm-cleanup-hook #'bottom-buffers-show-mode-line)
(advice-add 'helm-keyboard-quit :around #'helm-keyboard-quit-advice)
#+END_SRC

The header lines for the sources are only useful if there are more then a single source.
The following snippet will hide the header line if there is only one.
[[http://www.reddit.com/r/emacs/comments/2z7nbv/lean_helm_window/][Reference]]
#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(setq helm-display-header-line nil)

(defvar helm-source-header-default-background (face-attribute 'helm-source-header :background))
(defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground))
(defvar helm-source-header-default-box (face-attribute 'helm-source-header :box))

(defun helm-toggle-header-line ()
  (if (> (length helm-sources) 1)
      (set-face-attribute 'helm-source-header
                          nil
                          :foreground helm-source-header-default-foreground
                          :background helm-source-header-default-background
                          :box helm-source-header-default-box
                          :height 1.0)
    (set-face-attribute 'helm-source-header
                        nil
                        :foreground (face-attribute 'helm-selection :background)
                        :background (face-attribute 'helm-selection :background)
                        :box nil
                        :height 0.1)))


(add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)

#+END_SRC


And finally this will hide the minibuffer while helm is active

[[https://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/][Reference]]

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(defun helm-hide-minibuffer-maybe ()
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                              `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))

(add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)

#+END_SRC

** File Navigation

The following snippet will reconfigure the behaviour of keys in helm
file navigation buffers.

Backspace goes to the upper folder if you are not inside a filename,
and Return will select a file or navigate into the directory if
it is one.

[[http://emacs.stackexchange.com/a/7896/9198][Reference]]

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(defun dwim-helm-find-files-up-one-level-maybe ()
  (interactive)
  (if (looking-back "/" 1)
      (call-interactively 'helm-find-files-up-one-level)
    (delete-backward-char 1)))

(define-key helm-read-file-map (kbd "<backspace>") 'dwim-helm-find-files-up-one-level-maybe)
(define-key helm-read-file-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)
(define-key helm-find-files-map (kbd "<backspace>") 'dwim-helm-find-files-up-one-level-maybe)
(define-key helm-find-files-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)

(defun dwim-helm-find-files-navigate-forward (orig-fun &rest args)
  "Adjust how helm-execute-persistent actions behaves, depending on context"
  (if (file-directory-p (helm-get-selection))
      (apply orig-fun args)
    (helm-maybe-exit-minibuffer)))


(define-key helm-map (kbd "<return>") 'helm-maybe-exit-minibuffer)
(define-key helm-map (kbd "RET") 'helm-maybe-exit-minibuffer)
(define-key helm-find-files-map (kbd "<return>") 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "<return>") 'helm-execute-persistent-action)
(define-key helm-find-files-map (kbd "RET") 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "RET") 'helm-execute-persistent-action)

(advice-add 'helm-execute-persistent-action :around #'dwim-helm-find-files-navigate-forward)
#+END_SRC

And this snippet will remove the dots in helm file navigation

[[https://github.com/TheBB/spacemacs-layers/tree/master/no-dots][Reference]]

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
  (require 'cl-lib)

  (with-eval-after-load 'helm-files
    (advice-add 'helm-ff-filter-candidate-one-by-one
                :before-while 'no-dots-display-file-p))

  (defvar no-dots-whitelist nil
    "List of helm buffers in which to show dots.")

  (defun no-dots-in-white-listed-helm-buffer-p ()
    (member helm-buffer no-dots-whitelist))

  (defun no-dots-display-file-p (file)
    ;; in a whitelisted buffer display the file regardless of its name
    (or (no-dots-in-white-listed-helm-buffer-p)
        ;; not in a whitelisted buffer display all files
        ;; which does not end with /. /..
        (not (string-match "\\(?:/\\|\\`\\)\\.\\{1,2\\}\\'" file))))
#+END_SRC

** Improve Flx support

The following snippet will advice the helm source function to enable the flx fuzzy match in all sources. 

[[https://github.com/emacs-helm/helm/issues/145#issuecomment-151953381][Reference]]

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
(defun my-helm-make-source (f &rest args)
  (nconc args '(:fuzzy-match t))
  (apply f args))

(advice-add 'helm-make-source :around 'my-helm-make-source)
#+END_SRC

And you can increase flx speed (I have not benchmarked it myself) with 
the following.

[[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Reference]]

#+BEGIN_SRC emacs-lisp :tangle helm-better-defaults.el
;; garbage collections
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)


#+END_SRC 

** Helm Adaptive

This will offer last choosen candidates first for more sources, with support for flx.

I only use it to remember =describe-function= and =describe-variable=, if you want
to use it for other sources add them like shown below.

Warning: After some usage it stopped working correctly and sorted the results badly.
I can live without it, but maybe I will try to fix it later.

[[https://github.com/emacs-helm/helm/issues/1228][Reference]]

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'helm-adaptive
  (defcustom helm-adaptive-enabled-sources  '()
    "List of Helm Source names for which helm-adaptive will remember history."
    :type '(repeat string)
    :group 'helm-adapt)

  ;; Remember history for these sources add more sources here if you like
  (add-to-list 'helm-adaptive-enabled-sources "describe-function")
  (add-to-list 'helm-adaptive-enabled-sources "describe-variable")

  ;; Clobber helm's implementation
(defun helm-adapt-use-adaptive-p (&optional source-name)
  "Return current source only if it use adaptive history, nil otherwise."
  (when helm-adaptive-mode
    (let* ((source (or source-name (helm-get-current-source)))
           (adapt-source (when (listp source)
                           (or (assoc-default 'filtered-candidate-transformer
                                              (assoc (assoc-default 'type source)
                                                     helm-type-attributes))
                               (assoc-default 'candidate-transformer
                                              (assoc (assoc-default 'type source)
                                                     helm-type-attributes))
                               (assoc-default 'filtered-candidate-transformer source)
                               (assoc-default 'candidate-transformer source)))))
      (cond
        ((member (cdr (assoc 'name source)) helm-adaptive-enabled-sources)
         source)
        ((listp adapt-source)
         (and (member 'helm-adaptive-sort adapt-source) source))
        ((eq adapt-source 'helm-adaptive-sort)         
         source)))))

  (require 'dash)
  (setq helm-fuzzy-sort-fn
        (lambda (candidates source &optional use-real)

          (-> candidates
              (helm-flx-fuzzy-matching-sort source use-real)
              (helm-adaptive-sort source)
              ))
        helm-fuzzy-matching-highlight-fn #'helm-flx-fuzzy-highlight-match))

(helm-adaptive-mode 1)
#+END_SRC
